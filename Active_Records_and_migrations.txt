
      ---------Active Records---------------

     Rails Active Record is the Object/Relational Mapping (ORM) layer supplied with Rails. It closely follows the standard ORM model, which is as follows −

	-tables map to classes,
	-rows map to objects and
	-columns map to object attributes.
	-Rails Active Records provide an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are 		   automatically generated from the field names of database tables.

Each Active Record object has CRUD (Create, Read, Update, and Delete) methods for database access. This strategy allows simple designs and straight forward mappings between database tables and application objects.



-------------Migration----------------

-Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code


------>What Can Rails Migration Do?

->create_table(name, options)
->drop_table(name)
->rename_table(old_name, new_name)
->add_column(table_name, column_name, type, options)
->rename_column(table_name, column_name, new_column_name)
->change_column(table_name, column_name, type, options)
->remove_column(table_name, column_name)
->add_index(table_name, column_name, index_type)
->remove_index(table_name, column_name)


------->Migrations support all the basic data types-

->string − for small data types such as a title.

->text − for longer pieces of textual data, such as the description.

->integer − for whole numbers.

->float − for decimals.

->datetime and timestamp − store the date and time into a column.

->date and time − store either the date only or time only.

->binary − for storing data such as images, audio, or movies.

->Boolean − for storing true or false values.

->Valid column options are − The following is the list of valid column options.

->limit ( :limit => “50” )

->default (:default => “blah” )

->null (:null => false implies NOT NULL)


[we created a model Article so in database its name will be as articles.]



creating Migration
syntax->rails generate migration taskTable_Name column_name datatype (Table Name in model like Article)
                     or
        rails generate migration tastTable_Name(we can enter changes manually)

Manually changes
syntax->
add_column : tablename_as_per_database,:columnname,:datatype



---------->Add a column

Table-articles

 id | title | body | created_at | updated_at 
----+-------+------+------------+------------
(0 rows)



$rails g migration AddColumnToArticle desc:string
(create  a migration)

class AddColumnToArticle < ActiveRecord::Migration[7.0]
  def change
    add_column :articles, :desc, :string ,if_not_exists: true
  end
end

After-rails db:migrate

blog_development=# select * from articles;
 id | title | body | created_at | updated_at | desc 
----+-------+------+------------+------------+------
(0 rows)



----------->Rename a column

Table- articles

blog_development=# select * from articles;
 id | title | body | created_at | updated_at | desc 
----+-------+------+------------+------------+------
(0 rows)

-$rails g  migration RenameColumnFromArticle

class RenameColumnFromArticle < ActiveRecord::Migration[7.0]
  def change
    rename_column :articles , :desc ,:Description
  end
end

[here all details enter manually]
 rake db:migrate
 
 blog_development=# select * from articles;
 id | title | body | created_at | updated_at | Description 
----+-------+------+------------+------------+-------------
(0 rows)




---------->change column(datatype)
                                          Table "public.articles"
   Column    |              Type              | Collation | Nullable |               Default                
-------------+--------------------------------+-----------+----------+--------------------------------------
 id          | bigint                         |           | not null | nextval('articles_id_seq'::regclass)
 title       | character varying              |           |          | 
 body        | character varying              |           |          | 
 created_at  | timestamp(6) without time zone |           | not null | 
 updated_at  | timestamp(6) without time zone |           | not null | 
 Description | character varying              |           |          | 
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)

Datatype of Description is character

$rails g migration ChangeTypeOfArticle

class ChangeTypeOfArticle < ActiveRecord::Migration[7.0]
  def change
    change_column :articles,:Description,:text
  end
end

$rails db:migrate

                                          Table "public.articles"
   Column    |              Type              | Collation | Nullable |               Default                
-------------+--------------------------------+-----------+----------+--------------------------------------
 id          | bigint                         |           | not null | nextval('articles_id_seq'::regclass)
 title       | character varying              |           |          | 
 body        | character varying              |           |          | 
 created_at  | timestamp(6) without time zone |           | not null | 
 updated_at  | timestamp(6) without time zone |           | not null | 
 Description | text                           |           |          | 
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)

Datatype of Description is changed to text.



---------->Remove a column


                                          Table "public.articles"
   Column    |              Type              | Collation | Nullable |               Default                
-------------+--------------------------------+-----------+----------+--------------------------------------
 id          | bigint                         |           | not null | nextval('articles_id_seq'::regclass)
 title       | character varying              |           |          | 
 body        | character varying              |           |          | 
 created_at  | timestamp(6) without time zone |           | not null | 
 updated_at  | timestamp(6) without time zone |           | not null | 
 Description | text                           |           |          | 
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)
    
    
   $rails generate migration RemoveColumnFromArticle

class RemoveColumnFromArticle < ActiveRecord::Migration[7.0]
  def change
    remove_column :articles,:Description
  end
end
    
 $rails db:migrate

                                            Table "public.articles"
   Column   |              Type              | Collation | Nullable |               Default                
------------+--------------------------------+-----------+----------+--------------------------------------
 id         | bigint                         |           | not null | nextval('articles_id_seq'::regclass)
 title      | character varying              |           |          | 
 body       | character varying              |           |          | 
 created_at | timestamp(6) without time zone |           | not null | 
 updated_at | timestamp(6) without time zone |           | not null | 
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)





----->change column type

(use cast method)

class Changetype < ActiveRecord::Migration[7.0]
  def change
    change_column :employee_names, :salary, 'integer USING CAST(salary AS integer)'
  end
end






--------->create table using migration

$rails generate migration CreateInfoTable date:date



class CreateInfoTable < ActiveRecord::Migration[7.0]
  def change
    create_table :info_tables do |t|
      t.date :date

      t.timestamps
    end
  end
end

$rake db:migrate



------------>Drop a table using migration
                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_id_seq      | sequence | blog
 public | info_tables          | table    | blog
 public | info_tables_id_seq   | sequence | blog
 public | schema_migrations    | table    | blog
(6 rows)


create a migration
$rails generate migration DropTable

class DropTable < ActiveRecord::Migration[7.0]
  def change
    drop_table :info_tables
  end
end

$rake db:migrate

                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_id_seq      | sequence | blog
 public | schema_migrations    | table    | blog
(4 rows)

[Info_tables deleted]



------------>Rename Table

                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_id_seq      | sequence | blog
 public | schema_migrations    | table    | blog
(4 rows)


--create a migration
$rails g migration RenameTable

class RenameTable < ActiveRecord::Migration[7.0]
  def change
    rename_table :articles,:Blogdata
  end
end


$rake db:migrate


Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | Blogdata             | table    | blog
 public | Blogdata_id_seq      | sequence | blog
 public | ar_internal_metadata | table    | blog
 public | schema_migrations    | table    | blog
(4 rows)

[Table name changed to Bolgdata]



------------->Rename Table


Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | Blogdata             | table    | blog
 public | Blogdata_id_seq      | sequence | blog
 public | ar_internal_metadata | table    | blog
 public | schema_migrations    | table    | blog
 
 
 $rails g migration ChangeTableName
 
 class ChangeTableName < ActiveRecord::Migration[7.0]
  def change
    rename_table :Blogdata,:articles
  end
end

$rails db:migrate

                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_id_seq      | sequence | blog
 public | schema_migrations    | table    | blog
(4 rows)





------------>create table author

$rails g migration CreateAuthors name:string

class CreateAuthors < ActiveRecord::Migration[7.0]
  def change
    create_table :authors do |t|
      t.string :name

      t.timestamps
    end
  end
end




                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_id_seq      | sequence | blog
 public | authors              | table    | blog
 public | authors_id_seq       | sequence | blog
 public | schema_migrations    | table    | blog


blog_development=# select * from authors;
 id | name | created_at | updated_at 
----+------+------------+------------
(0 rows)


----------->add_foreign key

Adds a new foreign key. from_table is the table with the key column, to_table contains the referenced primary key.

-firstly we need to create a migration for adding a column in articles name-author_id

$rails g migration AddaColumn

class AddaColumn < ActiveRecord::Migration[7.0]
  def change
    add_column :articles,:author_id,:int
  end
end



-create a migration for foreign key

$rails g migration AddForeignkey

class AddForeignKey < ActiveRecord::Migration[7.0]
  def change
    add_foreign_key :articles,:authors
  end
end


Now,

                                          Table "public.articles"
   Column   |              Type              | Collation | Nullable |               Default                
------------+--------------------------------+-----------+----------+--------------------------------------
 id         | bigint                         |           | not null | nextval('articles_id_seq'::regclass)
 title      | character varying              |           |          | 
 body       | character varying              |           |          | 
 created_at | timestamp(6) without time zone |           | not null | 
 updated_at | timestamp(6) without time zone |           | not null | 
 author_id  | integer                        |           |          | 
Indexes:
    "articles_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "fk_rails_e74ce85cbc" FOREIGN KEY (author_id) REFERENCES authors(id)



blog_development=# \d authors
                                          Table "public.authors"
   Column   |              Type              | Collation | Nullable |               Default               
------------+--------------------------------+-----------+----------+-------------------------------------
 id         | bigint                         |           | not null | nextval('authors_id_seq'::regclass)
 name       | character varying              |           |          | 
 created_at | timestamp(6) without time zone |           | not null | 
 updated_at | timestamp(6) without time zone |           | not null | 
Indexes:
    "authors_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "articles" CONSTRAINT "fk_rails_e74ce85cbc" FOREIGN KEY (author_id) REFERENCES authors(id)
    
    
 -------------->Creating a foreign key, ignoring method call if the foreign key exists
 
 -create  migration in that in change method write this.
add_foreign_key(:articles, :authors, if_not_exists: true)  
    
----------->Creating a foreign key on a specific column

-create a migration write it in change method.

add_foreign_key :table1, :table2, column: :column_of_table1, primary_key: table2_primary_key
    
    
----------->Creating a cascading foreign key

add_foreign_key :articles, :authors, on_delete: :cascade
    
    

    
    
--------->add_index

$rails g migration AddIndex

class AddIndex < ActiveRecord::Migration[7.0]
  def change
    add_index :articles,:title
  end
end
    
    
 --------->add_reference
 
 class Addreferenece < ActiveRecord::Migration[7.0]
  def change
    add_reference :articles,:authors
  end
  
 ------------>change_column_null
 
 Sets or removes a NOT NULL constraint on a column. The null flag indicates whether the value can be NULL. For example

 [title cannot be null]
 
 $rails g migration ChangeNull
  
  class ChangeNull < ActiveRecord::Migration[7.0]
  def change
    change_column_null :articles,:title ,false
  end
end
  
  
 ------------>create_join_table
 
 [create one table that is combination of two tables.]
 
 $rails g migration CreateJoinTable
 
 class CreateJoinTable < ActiveRecord::Migration[7.0]
  def change
    create_join_table :articles,:authors
  end
end


                List of relations
 Schema |         Name         |   Type   | Owner 
--------+----------------------+----------+-------
 public | ar_internal_metadata | table    | blog
 public | articles             | table    | blog
 public | articles_authors     | table    | blog
 public | articles_id_seq      | sequence | blog
 public | authors              | table    | blog
 public | authors_id_seq       | sequence | blog
 public | schema_migrations    | table    | blog
(7 rows)

  
  
  
  
----------->remove_foreign_key(from_table, to_table = nil, **options)

Removes the given foreign key from the table.

$rails g migration RemoveForeignKeyFromAuthors 

class RemoveForeignKeyFromAuthors < ActiveRecord::Migration[7.0]
  def change
    remove_foreign_key :articles,:authors
  end
end






-------------->remove Index

remove_index(table_name, column_name )

$rails g migration RemoveIndexFromArticles

class RemoveIndexFromArticles < ActiveRecord::Migration[7.0]
  def change
    remove_index :articles, :title
  end
end



--------------->remove Reference

class RemoveReference < ActiveRecord::Migration[7.0]
  def change
    remove_reference :articles,:authors
  end
end


------------->remove timestamps

class Removetiestampfromdepartments < ActiveRecord::Migration[7.0]
  def change
    remove_timestamps :departments
  end
end


------------>Rolling Back

---A common task is to rollback the last migration. For example, if you made a mistake in it and wish to correct it.
 Rather than tracking down the version number associated with the previous migration you can run:

rake db:rollback 

---This will rollback the latest migration, either by reverting the change method or by running the down method. If you need to undo several migrations you can provide a STEP parameter:
will revert the last 3 migrations.

$ rails db:rollback STEP=3


----Setup the Database

The bin/rails db:setup command will create the database, load the schema, and initialize it with the seed data.


----Resetting the Database

The bin/rails db:reset command will drop the database and set it up again. This is functionally equivalent to bin/rails db:drop db:setup.



------Running Specific Migrations

-If you need to run a specific migration up or down, the db:migrate:up and db:migrate:down commands will do that. Just specify the appropriate version and the corresponding migration will have its change, up or down method invoked, for example:


-will run the 20080906120000 migration by running the change method (or the up method). This command will first check whether the migration is already performed and will do nothing if Active Record believes that it has already been run.

$ rails db:migrate:up VERSION=20080906120000


-for particular migration

$rails db:migrate version==20230130054737
 


--------> redo

we can get back to stage if we done rollback migrations and want its back.

$rails db:migrate:redo

(redo the last rollback migrations)


$rails db:migrate:redo step=2
(redo as many rollback back by passing in step.)




---------->up and down methods

class AddcolumnToAuthors < ActiveRecord::Migration[7.0]
  def up
    add_column :authors,:salary,:string
  end

  def down
    remove_column :authors,:salary
  end
end

[when we run migrate then it will add column salary]
[when we rollback migrate then down will execute and remove column]




--------->Various rake commands.


OPERATION			COMMAND					DESCRIPTION
General			rake db:migrate				This will migrate your database by running migrations that are not run yet
Running specific Migration	rake db:migrate VERSION=20130717110623	This runs specific migration file from your db/migrate directory having version 20130717110623
Running up from migration	rake db:migrate:up VERSION=20130717110623	This runs up part from your migration
Running down from migration	rake db:migrate:down VERSION=20130717110623	This runs down part from your migration
Re-Running Specific Migration	rake db:migrate:redo VERSION=20130717110623	This will first run down part and then up part of the migration having version 20130717110623
Re-Running all migrations	rake db:migrate:redo				This will re-run all the migrations
Rollback a migration		rake db:rollback				This will rollback last run migration(i.e. Default STEP=1)
Rollback last n migrations	rake db:rollback STEP=4			This will rollback last 4 migrations.




---------->change environment

$rails db:migrate RAIL_ENV=test

(by default we are in the development environment)

















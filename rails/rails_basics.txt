

-------------Rails-----------------
		
	->An extremely productive web-application framework.
	->Written in Ruby by David Heinemeier Hansson.
	->You could develop a web application at least ten times faster with Rails than you could with a typical Java framework.
	->An open source Ruby framework for developing database-backed web applications.
	->Configure your code with Database Schema.
	->No compilation phase required 
	->latest version :7.0.4
	->worked on port http://localhost:3000
	->Provide "DRY" no need to write code over and over again.
	
	
	
	
-----------What's New in Rails7-------------

1. Webpack and Node are not required.
		Developers need not require Webpack and Nodejs to use npm packages. Transpiling ES6 and Babel and then bundling would require a lot of steps. While developers can use Webpacker gem to 		perform this task, it brought additional baggage and was hard to understand and make changes to.
		Developers can now import maps via importmaps-rails gem. Also, instead of writing code for package.json and installing dependencies using yarn or npm, you can use ./bin/importmap to 			update, pin or unpin dependencies.
		
		
2. Encrypted Database Layer	
		Rail 7 allows developers to encrypt certain database fields using the encrypts method on the ActiveRecord::Base.


3. Asynchronous Querying
		Developers can now use the load_async method while querying data to fetch results. This is time-savvy when asking multiple queries together.


4. Applications would only run in the Zeitwerk mode.
		All Rail 7 applications will now run in the Zeitwerk mode. The management has ensured that this transformation will be smooth for the developers. Zeitwerk is a code loader for Ruby on 		Rails. The developers can easily load your project's module and classes using this.


5. UJS and Turbolinks is now replaced Stimulus and Turbo
		Applications using Rails 7 will now get Stimulus and Turbo (from Hotwire) from default. Hotwire is a modern approach to building web applications using minimal JavaScript by sending 			HTML and not JSON over the wire.

6. Inline your query with a single record using sole
		Developers can now use first or find_by instead of sole or find_sole_by when asserting a query to match a single record.

7. Use controller actions to the stream generated files.
		Rail on Ruby 7 allows you to streamline a file generated on the fly using send_stream inside controller action.

8. Named Variants
		You can name variants using ActiveStorage in the latest Ruby on Rails 7.




-----Strength

-Meta programming
	Metaprogramming is a technique by which you can write code that writes code by itself dynamically at runtime. This means you can define methods and classes during runtime.


-Active record
	Rails introduces the Active Record framework, which saves objects into the database. 


-convention over configurartion
	Easy to configure


-Scaffolding

	A scaffold is a set of automatically generated files which forms the basic structure of a Rails project.


-Built in testing

	Rails creates simple automated tests you can then extend.
	Ruby can then execute all your automated tests with the rake utility.

-Three environments

	Rails gives you three default environments: development, testing, and production. Each behaves slightly differently, making your entire software development cycle easier. For example, Rails 		creates a fresh copy of the Test database for each test run.





-------Rails installation on linux

step-1:First of all, we have to install git - core and some ruby dependences.

tp> sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel

step-2:install rbenv

Now we will install rbenv and set the appropriate environment variables.

step-3:install ruby

step-4:
tp> install rails -v 7.0.4
tp> rbenv rehash
tp> rails -v #7.0.4



---------->MVC Framework
	The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.

-->Model (ActiveRecord )
	It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.


-->View ( ActionView )
	It is a presentation of data in a particular format, triggered by a controller's decision to present the data. They are script-based template systems.

-->Controller ( ActionController )
	This subsystem is implemented in ActionController, which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).



-------->Directory struture

File/Folder		       Purpose

app/	            Contains the controllers, models, views, helpers, mailers, channels, jobs, and assets for your application. You'll focus on this folder for the remainder of this guide.

bin/	           Contains the rails script that starts your app and can contain other scripts you use to set up, update, deploy, or run your application.

config/            Contains configuration for your application's routes, database, and more. This is covered in more detail in Configuring Rails Applications.

config.ru          Rack configuration for Rack-based servers used to start the application. For more information about Rack, see the Rack website.

db/	           Contains your current database schema, as well as the database migrations.

Gemfile

Gemfile.lock	   These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler.

lib/	           Extended modules for your application.

log/	           Application log files.

public/	   Contains static files and compiled assets. When your app is running, this directory will be exposed as-is.

Rakefile	   This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing Rakefile,        			  should  add your own tasks by adding files to the lib/tasks directory of your application.
README.md	   This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.

storage/	  Active Storage files for Disk Service. This is covered in Active Storage Overview.

test/		  Unit tests, fixtures, and other test apparatus. These are covered in Testing Rails Applications.

tmp/		  Temporary files (like cache and pid files).

vendor/	  A place for all third-party code. In a typical Rails application this includes vendored gems.

.gitattributes	  This file defines metadata for specific paths in a git repository. This metadata can be used by git and other tools to enhance their behavior.

.gitignore	  This file tells git which files (or patterns) it should ignore. See GitHub - Ignoring files for more information about ignoring files.

.ruby-version	  This file contains the default Ruby version.





------->create a new rails application
 
 ->rails new project_name
 
------->To run server

->rails server
























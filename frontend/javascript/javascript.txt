-------javascript
-JavaScript (js) is a light-weight object-oriented programming language which is used by several websites for scripting the webpages.
-It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an HTML document.

--->where to
-it is inserted using <script> tag.
-it can be written in body or head.
-it can written in as external file and then link using <script> tag.

--->javascript display possibilities
-Writing into an HTML element, using innerHTML.
    .JavaScript can use the document.getElementById(id) method.
    .The id attribute defines the HTML element. The innerHTML property defines the HTML content:
-Writing into the HTML output using document.write().
-Writing into an alert box, using window.alert().
-Writing into the browser console, using console.log().


--->javascript variables
->let , that values can be changed.
    .The let keyword was introduced in ES6 (2015).
    .Variables defined with let cannot be Redeclared.
    .Variables defined with let must be Declared before use.
    .Variables defined with let have Block Scope, cannot access outside the block.
->const, that values cannot be changed.
    .The const keyword was introduced in ES6 (2015).
    .JavaScript const variables must be assigned a value when they are declared:
    .Variables defined with const cannot be Redeclared.
    .Variables defined with const cannot be Reassigned.
    .Variables defined with const have Block Scope.
    .It does not define a constant value. It defines a constant reference to a value.

    Because of this you can NOT:
    .Reassign a constant value
    .Reassign a constant array
    .Reassign a constant object

    But you CAN:
    .Change the elements of constant array
    .Change the properties of constant object

-->javascript identifiers
Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter.
Names can also begin with $ and _ (but we will not use it in this tutorial).
Names are case sensitive (y and Y are different variables).
Reserved words (like JavaScript keywords) cannot be used as names.


--->operators
.Arithmetic Operators
.Assignment Operators
.Comparison Operators
.Logical Operators
.Conditional Operators
.Type Operators


-->Datatypes
JavaScript has 8 Datatypes
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

The Object Datatype
The object data type can contain:

1. An object
2. An array
3. A date


---string methods
[Strings are immutable: Strings cannot be changed, only replaced.all methods return new string they not modify the original string.]
-length, string.length
-slice, str.slice(start, end), end is not included.
-substring, str.substring(start, end) but not work on negative values took negative values as 0.
-substr, str.substr(start, length)
-replace, str.replace("old", "new")
-upper, str.toUpperCase
-lower, str.toLowerCase.
-conact, str1.concat(str2)
-trim, str.trim(), removes whitespace from both sides.
-trimStart(), remove whitespace from beg of string only.
-trimEnd(), removes whitespace from end of string only.
-charAt() str.charAt(index),returns the character at a specified index (position) in a string:
-charCodeAt() method returns the unicode of the character at a specified index in a string:(between 0 and 65535).

--convert string to array.
-A string can be converted to an array with the split() method:

text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe
[whole string will stored in arr[o]]

- text.split(""), then each character will be at particluar index.

-----conditional statements;
-->if else
-Use if to specify a block of code to be executed, if a specified condition is true.
-Use else to specify a block of code to be executed, if the same condition is false.
-Use else if to specify a new condition to test, if the first condition is false.

-->switch
-The switch expression is evaluated once.
-The value of the expression is compared with the values of each case.
-If there is a match, the associated block of code is executed.
-If there is no match, the default code block is executed.

--->Loop
->for
-Its statement creates a loop with 3 optional expressions:

for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

.Expression 1 is executed (one time) before the execution of the code block.
.Expression 2 defines the condition for executing the code block.
.Expression 3 is executed (every time) after the code block has been executed.

->for in
for in statement loops through the properties of an Object:
syntax-
for (key in object) {
  // code block to be executed
}

->for of
-It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:

->while loop
-The while loop loops through a block of code as long as a specified condition is true.

while (condition) {
  // code block to be executed
}

->do while
-The do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.

Syntax
do {
  // code block to be executed
}
while (condition);

----break
-The break statement can also be used to jump out of a loop:

-----continue
-The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

------HTML DOM
When a web page is loaded, the browser creates a Document Object Model of the page.

--->HTML DOM methods are actions you can perform (on HTML Elements).

--->HTML DOM properties are values (of HTML Elements) that you can set or change.

[The innerHTML property can be used to get or change any HTML element, including <html> and <body>.]


-->HTML DOM Document
->The HTML DOM document object is the owner of all other objects in your web page.

--->change html style
To change the style of an HTML element.
syntax:
document.getElementById(id).style.property = new style


-->Reacting to events
->A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.
examples of html events are->

-When a user clicks the mouse.
-When a web page has loaded.
-When an image has been loaded.
-When the mouse moves over an element.
-When an input field is changed.
-When an HTML form is submitted.
-When a user strokes a key.

---->EventListener
-The addEventListener() method attaches an event handler to the specified element.
-The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.
-You can add many event handlers to one element.

-->DOM Root Nodes
There are two special properties that allow access to the full document:
-document.body - The body of the document
-document.documentElement - The full document


---->The nodeValue property specifies the value of a node.

nodeValue for element nodes is null
nodeValue for text nodes is the text itself
nodeValue for attribute nodes is the attribute value.



--->The nodeType property is read only. It returns the type of a node.

-->To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element.
-->To remove an HTML element, use the remove() method:


----->The getElementsByTagName() method returns an HTMLCollection object.
-An HTMLCollection object is an array-like list (collection) of HTML elements.

---->A NodeList object is a list (collection) of nodes extracted from a document.


---->Functions
-JavaScript functions are defined with the function keyword.
-You can use a function declaration or a function expression.
-JavaScript functions can be called before they are declared:
-It allows function parameters to have default values.
-The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:

-->The function above can  be anonymous function (a function without a name).
-Functions stored in variables do not need function names. They are always invoked (called) using the variable name.

--->Function constructor
-Functions can also be defined with a built-in JavaScript function constructor called Function().

--->Call() method
-The call() method is a predefined JavaScript method.
-It can be used to invoke (call) a method with an owner object as an argument (parameter).

---->apply() method
-The apply() method takes arguments as an arra

---->classes

Use the keyword class to create a class.

Always add a method named constructor():

--constructor
The constructor method is a special method:
-It has to have the exact name "constructor".
-It is executed automatically when a new object is created.
-It is used to initialize object properties.
-If you do not define a constructor method, JavaScript will add an empty constructor method.


->add any method after adding constructor.

-->inheritance
-To create a class inheritance, use the extends keyword.
-A class created with a class inheritance inherits all the methods from another class:



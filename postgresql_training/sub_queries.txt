
                                                         -----------SUB QUERIES----------
                                                         
.A subquery or Inner query or Nested query is a query embedded within the WHERE clause.
.A subquery is used to return data that will be used in the main query as a condition to further restrict the data to be retrieved.
.Subqueries can be used with the SELECT, INSERT, UPDATE and DELETE statements along with the operators like =, <, >, >=, <=, IN, etc.
.There are a few rules that subqueries must follow âˆ’
.Subqueries must be enclosed within parentheses.
.A subquery can have only one column in the SELECT clause, unless multiple columns are in the main query for the subquery to compare its selected columns.
.An ORDER BY cannot be used in a subquery, although the main query can use an ORDER BY. The GROUP BY can be used to perform the same function as the ORDER BY in a subquery.
.Subqueries that return more than one row can only be used with multiple value operators, such as the IN, EXISTS, NOT IN, ANY/SOME, ALL operator.
.The BETWEEN operator cannot be used with a subquery; however, the BETWEEN can be used within the subquery.


--SUB QUERY WITH SELECT STATEMEMT---

syntax-		SELECT column_name [, column_name ]
		FROM   table1 [, table2 ]
		WHERE  column_name OPERATOR
	      		(SELECT column_name [, column_name ]
		      FROM table1 [, table2 ]
      			[WHERE])

e.g->(show names who are having salary more than id 3)
test=# SELECT NAME FROM COMPANY WHERE SALARY>(SELECT SALARY FROM COMPANY WHERE ID = 3);
 name 
------
 E
 D
 F
 G
 H
 A
(6 rows)



------SUB QUERY WITH INSERT STATEMENT------

syntax-
INSERT INTO table_name [ (column1 [, column2 ]) ]
   SELECT [ *|column1 [, column2 ] ]
   FROM table1 [, table2 ]
   [ WHERE VALUE OPERATOR ]

e.g->(copy all data to company1)
test=# INSERT INTO COMPANY1
SELECT * FROM COMPANY
WHERE ID IN(
SELECT ID FROM COMPANY);




--------SUB QUERY WITH UPDATE STATEMENT-----

syntax->
UPDATE table
SET column_name = new_value
[ WHERE OPERATOR [ VALUE ]
   (SELECT COLUMN_NAME
   FROM TABLE_NAME)
   [ WHERE) ]
   
   
   
e.g->(updates SALARY by 0.50 times in the COMPANY table for all the customers, whose AGE is greater than or equal to 40)
test=# UPDATE  COMPANY
SET SALARY=SALARY*0.5 WHERE
AGE IN(SELECT AGE FROM COMPANY WHERE AGE >=40);   
   
   
------SUB QUERIES WITH DELETE STATEMENT---------

 syntax-
 DELETE FROM TABLE_NAME
[ WHERE OPERATOR [ VALUE ]
   (SELECT COLUMN_NAME
   FROM TABLE_NAME)
   [ WHERE) ]  
   
 
 
e.g->(deletes records from the COMPANY1 table for all the customers, whose AGE is greater than or equal to 40)
test=# DELETE FROM COMPANY1 WHERE AGE IN(SELECT AGE FROM COMPANY1 WHERE AGE>=40);
 
   

------SUB QUERIES OPERATORS----------


---->>>EXIST(return true if subquery return  one or more rows,else return false)

-e.g->
test=# SELECT * FROM BOOK;
 id | name 
----+------
  1 | A
  2 | B
  3 | C
(3 rows)

test=# SELECT * FROM PRICE;
 id | price 
----+-------
  2 |   200
  3 |   300
  4 |   100
(3 rows)

test=# SELECT * FROM BOOK WHERE EXISTS(SELECT * FROM PRICE WHERE BOOK.ID=PRICE.ID);
 id | name 
----+------
  2 | B
  3 | C
(2 rows)



--->>>NOT EXIST

e.g->
test=# SELECT * FROM BOOK;
 id | name 
----+------
  1 | A
  2 | B
  3 | C
(3 rows)

test=# SELECT * FROM PRICE;
 id | price 
----+-------
  2 |   200
  3 |   300
  4 |   100
(3 rows)

test=# SELECT * FROM BOOK WHERE NOT EXISTS(SELECT * FROM PRICE WHERE BOOK.ID = PRICE.ID);
 id | name 
----+------
  1 | A
(1 row)



---->>>IN(apply on list ,if value is found return true ,else false)

e.g->(4 is not present so not output)
test=# SELECT * FROM BOOK WHERE ID  IN(1,4,3);
 id | name 
----+------
  1 | A
  3 | C
(2 rows)




---->>NOT IN
e.g-(print details that are not in list.)

test=# SELECT * FROM BOOK WHERE ID NOT  IN(1,3);
 id | name 
----+------
  2 | B
(1 row)




   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
